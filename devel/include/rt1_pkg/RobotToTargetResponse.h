// Generated by gencpp from file rt1_pkg/RobotToTargetResponse.msg
// DO NOT EDIT!


#ifndef RT1_PKG_MESSAGE_ROBOTTOTARGETRESPONSE_H
#define RT1_PKG_MESSAGE_ROBOTTOTARGETRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt1_pkg
{
template <class ContainerAllocator>
struct RobotToTargetResponse_
{
  typedef RobotToTargetResponse_<ContainerAllocator> Type;

  RobotToTargetResponse_()
    : dx(0.0)
    , dy(0.0)
    , distance(0.0)
    , average_vx(0.0)
    , average_vy(0.0)  {
    }
  RobotToTargetResponse_(const ContainerAllocator& _alloc)
    : dx(0.0)
    , dy(0.0)
    , distance(0.0)
    , average_vx(0.0)
    , average_vy(0.0)  {
  (void)_alloc;
    }



   typedef float _dx_type;
  _dx_type dx;

   typedef float _dy_type;
  _dy_type dy;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _average_vx_type;
  _average_vx_type average_vx;

   typedef float _average_vy_type;
  _average_vy_type average_vy;





  typedef boost::shared_ptr< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotToTargetResponse_

typedef ::rt1_pkg::RobotToTargetResponse_<std::allocator<void> > RobotToTargetResponse;

typedef boost::shared_ptr< ::rt1_pkg::RobotToTargetResponse > RobotToTargetResponsePtr;
typedef boost::shared_ptr< ::rt1_pkg::RobotToTargetResponse const> RobotToTargetResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator1> & lhs, const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator2> & rhs)
{
  return lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy &&
    lhs.distance == rhs.distance &&
    lhs.average_vx == rhs.average_vx &&
    lhs.average_vy == rhs.average_vy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator1> & lhs, const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt1_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "185aad6ed636881de3d9111fc76b7e00";
  }

  static const char* value(const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x185aad6ed636881dULL;
  static const uint64_t static_value2 = 0xe3d9111fc76b7e00ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt1_pkg/RobotToTargetResponse";
  }

  static const char* value(const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 dx\n"
"float32 dy\n"
"float32 distance\n"
"float32 average_vx\n"
"float32 average_vy\n"
"\n"
;
  }

  static const char* value(const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.distance);
      stream.next(m.average_vx);
      stream.next(m.average_vy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotToTargetResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt1_pkg::RobotToTargetResponse_<ContainerAllocator>& v)
  {
    s << indent << "dx: ";
    Printer<float>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<float>::stream(s, indent + "  ", v.dy);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "average_vx: ";
    Printer<float>::stream(s, indent + "  ", v.average_vx);
    s << indent << "average_vy: ";
    Printer<float>::stream(s, indent + "  ", v.average_vy);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT1_PKG_MESSAGE_ROBOTTOTARGETRESPONSE_H
